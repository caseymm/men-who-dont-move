{"version":3,"file":"app.a7252ddb.js","sources":["../../node_modules/dynamic-import-polyfill/dist/dynamic-import-polyfill.mjs","../../node_modules/@datagraphics/baker/lib/polyfills/dynamic-import.js","../../node_modules/intersection-observer/intersection-observer.js"],"sourcesContent":["function e({modulePath:e=\".\",importFunctionName:t=\"__import__\"}={}){try{self[t]=new Function(\"u\",\"return import(u)\")}catch(o){const r=new URL(e,location),n=e=>{URL.revokeObjectURL(e.src),e.remove()};self[t]=e=>new Promise((o,a)=>{const c=new URL(e,r);if(self[t].moduleMap[c])return o(self[t].moduleMap[c]);const l=new Blob([`import * as m from '${c}';`,`${t}.moduleMap['${c}']=m;`],{type:\"text/javascript\"}),m=Object.assign(document.createElement(\"script\"),{type:\"module\",src:URL.createObjectURL(l),onerror(){a(new Error(`Failed to import: ${e}`)),n(m)},onload(){o(self[t].moduleMap[c]),n(m)}});document.head.appendChild(m)}),self[t].moduleMap={}}}var t=Object.freeze({initialize:e});export default t;export{e as initialize};\n","import dynamicImportPolyfill from 'dynamic-import-polyfill';\n\n// This needs to be done before any dynamic imports are used\ndynamicImportPolyfill.initialize({ modulePath: 'scripts/' });\n","/**\n * Copyright 2016 Google Inc. All Rights Reserved.\n *\n * Licensed under the W3C SOFTWARE AND DOCUMENT NOTICE AND LICENSE.\n *\n *  https://www.w3.org/Consortium/Legal/2015/copyright-software-and-document\n *\n */\n(function() {\n'use strict';\n\n// Exit early if we're not running in a browser.\nif (typeof window !== 'object') {\n  return;\n}\n\n// Exit early if all IntersectionObserver and IntersectionObserverEntry\n// features are natively supported.\nif ('IntersectionObserver' in window &&\n    'IntersectionObserverEntry' in window &&\n    'intersectionRatio' in window.IntersectionObserverEntry.prototype) {\n\n  // Minimal polyfill for Edge 15's lack of `isIntersecting`\n  // See: https://github.com/w3c/IntersectionObserver/issues/211\n  if (!('isIntersecting' in window.IntersectionObserverEntry.prototype)) {\n    Object.defineProperty(window.IntersectionObserverEntry.prototype,\n      'isIntersecting', {\n      get: function () {\n        return this.intersectionRatio > 0;\n      }\n    });\n  }\n  return;\n}\n\n\n/**\n * A local reference to the document.\n */\nvar document = window.document;\n\n\n/**\n * An IntersectionObserver registry. This registry exists to hold a strong\n * reference to IntersectionObserver instances currently observing a target\n * element. Without this registry, instances without another reference may be\n * garbage collected.\n */\nvar registry = [];\n\n\n/**\n * Creates the global IntersectionObserverEntry constructor.\n * https://w3c.github.io/IntersectionObserver/#intersection-observer-entry\n * @param {Object} entry A dictionary of instance properties.\n * @constructor\n */\nfunction IntersectionObserverEntry(entry) {\n  this.time = entry.time;\n  this.target = entry.target;\n  this.rootBounds = entry.rootBounds;\n  this.boundingClientRect = entry.boundingClientRect;\n  this.intersectionRect = entry.intersectionRect || getEmptyRect();\n  this.isIntersecting = !!entry.intersectionRect;\n\n  // Calculates the intersection ratio.\n  var targetRect = this.boundingClientRect;\n  var targetArea = targetRect.width * targetRect.height;\n  var intersectionRect = this.intersectionRect;\n  var intersectionArea = intersectionRect.width * intersectionRect.height;\n\n  // Sets intersection ratio.\n  if (targetArea) {\n    // Round the intersection ratio to avoid floating point math issues:\n    // https://github.com/w3c/IntersectionObserver/issues/324\n    this.intersectionRatio = Number((intersectionArea / targetArea).toFixed(4));\n  } else {\n    // If area is zero and is intersecting, sets to 1, otherwise to 0\n    this.intersectionRatio = this.isIntersecting ? 1 : 0;\n  }\n}\n\n\n/**\n * Creates the global IntersectionObserver constructor.\n * https://w3c.github.io/IntersectionObserver/#intersection-observer-interface\n * @param {Function} callback The function to be invoked after intersection\n *     changes have queued. The function is not invoked if the queue has\n *     been emptied by calling the `takeRecords` method.\n * @param {Object=} opt_options Optional configuration options.\n * @constructor\n */\nfunction IntersectionObserver(callback, opt_options) {\n\n  var options = opt_options || {};\n\n  if (typeof callback != 'function') {\n    throw new Error('callback must be a function');\n  }\n\n  if (options.root && options.root.nodeType != 1) {\n    throw new Error('root must be an Element');\n  }\n\n  // Binds and throttles `this._checkForIntersections`.\n  this._checkForIntersections = throttle(\n      this._checkForIntersections.bind(this), this.THROTTLE_TIMEOUT);\n\n  // Private properties.\n  this._callback = callback;\n  this._observationTargets = [];\n  this._queuedEntries = [];\n  this._rootMarginValues = this._parseRootMargin(options.rootMargin);\n\n  // Public properties.\n  this.thresholds = this._initThresholds(options.threshold);\n  this.root = options.root || null;\n  this.rootMargin = this._rootMarginValues.map(function(margin) {\n    return margin.value + margin.unit;\n  }).join(' ');\n}\n\n\n/**\n * The minimum interval within which the document will be checked for\n * intersection changes.\n */\nIntersectionObserver.prototype.THROTTLE_TIMEOUT = 100;\n\n\n/**\n * The frequency in which the polyfill polls for intersection changes.\n * this can be updated on a per instance basis and must be set prior to\n * calling `observe` on the first target.\n */\nIntersectionObserver.prototype.POLL_INTERVAL = null;\n\n/**\n * Use a mutation observer on the root element\n * to detect intersection changes.\n */\nIntersectionObserver.prototype.USE_MUTATION_OBSERVER = true;\n\n\n/**\n * Starts observing a target element for intersection changes based on\n * the thresholds values.\n * @param {Element} target The DOM element to observe.\n */\nIntersectionObserver.prototype.observe = function(target) {\n  var isTargetAlreadyObserved = this._observationTargets.some(function(item) {\n    return item.element == target;\n  });\n\n  if (isTargetAlreadyObserved) {\n    return;\n  }\n\n  if (!(target && target.nodeType == 1)) {\n    throw new Error('target must be an Element');\n  }\n\n  this._registerInstance();\n  this._observationTargets.push({element: target, entry: null});\n  this._monitorIntersections();\n  this._checkForIntersections();\n};\n\n\n/**\n * Stops observing a target element for intersection changes.\n * @param {Element} target The DOM element to observe.\n */\nIntersectionObserver.prototype.unobserve = function(target) {\n  this._observationTargets =\n      this._observationTargets.filter(function(item) {\n\n    return item.element != target;\n  });\n  if (!this._observationTargets.length) {\n    this._unmonitorIntersections();\n    this._unregisterInstance();\n  }\n};\n\n\n/**\n * Stops observing all target elements for intersection changes.\n */\nIntersectionObserver.prototype.disconnect = function() {\n  this._observationTargets = [];\n  this._unmonitorIntersections();\n  this._unregisterInstance();\n};\n\n\n/**\n * Returns any queue entries that have not yet been reported to the\n * callback and clears the queue. This can be used in conjunction with the\n * callback to obtain the absolute most up-to-date intersection information.\n * @return {Array} The currently queued entries.\n */\nIntersectionObserver.prototype.takeRecords = function() {\n  var records = this._queuedEntries.slice();\n  this._queuedEntries = [];\n  return records;\n};\n\n\n/**\n * Accepts the threshold value from the user configuration object and\n * returns a sorted array of unique threshold values. If a value is not\n * between 0 and 1 and error is thrown.\n * @private\n * @param {Array|number=} opt_threshold An optional threshold value or\n *     a list of threshold values, defaulting to [0].\n * @return {Array} A sorted list of unique and valid threshold values.\n */\nIntersectionObserver.prototype._initThresholds = function(opt_threshold) {\n  var threshold = opt_threshold || [0];\n  if (!Array.isArray(threshold)) threshold = [threshold];\n\n  return threshold.sort().filter(function(t, i, a) {\n    if (typeof t != 'number' || isNaN(t) || t < 0 || t > 1) {\n      throw new Error('threshold must be a number between 0 and 1 inclusively');\n    }\n    return t !== a[i - 1];\n  });\n};\n\n\n/**\n * Accepts the rootMargin value from the user configuration object\n * and returns an array of the four margin values as an object containing\n * the value and unit properties. If any of the values are not properly\n * formatted or use a unit other than px or %, and error is thrown.\n * @private\n * @param {string=} opt_rootMargin An optional rootMargin value,\n *     defaulting to '0px'.\n * @return {Array<Object>} An array of margin objects with the keys\n *     value and unit.\n */\nIntersectionObserver.prototype._parseRootMargin = function(opt_rootMargin) {\n  var marginString = opt_rootMargin || '0px';\n  var margins = marginString.split(/\\s+/).map(function(margin) {\n    var parts = /^(-?\\d*\\.?\\d+)(px|%)$/.exec(margin);\n    if (!parts) {\n      throw new Error('rootMargin must be specified in pixels or percent');\n    }\n    return {value: parseFloat(parts[1]), unit: parts[2]};\n  });\n\n  // Handles shorthand.\n  margins[1] = margins[1] || margins[0];\n  margins[2] = margins[2] || margins[0];\n  margins[3] = margins[3] || margins[1];\n\n  return margins;\n};\n\n\n/**\n * Starts polling for intersection changes if the polling is not already\n * happening, and if the page's visibility state is visible.\n * @private\n */\nIntersectionObserver.prototype._monitorIntersections = function() {\n  if (!this._monitoringIntersections) {\n    this._monitoringIntersections = true;\n\n    // If a poll interval is set, use polling instead of listening to\n    // resize and scroll events or DOM mutations.\n    if (this.POLL_INTERVAL) {\n      this._monitoringInterval = setInterval(\n          this._checkForIntersections, this.POLL_INTERVAL);\n    }\n    else {\n      addEvent(window, 'resize', this._checkForIntersections, true);\n      addEvent(document, 'scroll', this._checkForIntersections, true);\n\n      if (this.USE_MUTATION_OBSERVER && 'MutationObserver' in window) {\n        this._domObserver = new MutationObserver(this._checkForIntersections);\n        this._domObserver.observe(document, {\n          attributes: true,\n          childList: true,\n          characterData: true,\n          subtree: true\n        });\n      }\n    }\n  }\n};\n\n\n/**\n * Stops polling for intersection changes.\n * @private\n */\nIntersectionObserver.prototype._unmonitorIntersections = function() {\n  if (this._monitoringIntersections) {\n    this._monitoringIntersections = false;\n\n    clearInterval(this._monitoringInterval);\n    this._monitoringInterval = null;\n\n    removeEvent(window, 'resize', this._checkForIntersections, true);\n    removeEvent(document, 'scroll', this._checkForIntersections, true);\n\n    if (this._domObserver) {\n      this._domObserver.disconnect();\n      this._domObserver = null;\n    }\n  }\n};\n\n\n/**\n * Scans each observation target for intersection changes and adds them\n * to the internal entries queue. If new entries are found, it\n * schedules the callback to be invoked.\n * @private\n */\nIntersectionObserver.prototype._checkForIntersections = function() {\n  var rootIsInDom = this._rootIsInDom();\n  var rootRect = rootIsInDom ? this._getRootRect() : getEmptyRect();\n\n  this._observationTargets.forEach(function(item) {\n    var target = item.element;\n    var targetRect = getBoundingClientRect(target);\n    var rootContainsTarget = this._rootContainsTarget(target);\n    var oldEntry = item.entry;\n    var intersectionRect = rootIsInDom && rootContainsTarget &&\n        this._computeTargetAndRootIntersection(target, rootRect);\n\n    var newEntry = item.entry = new IntersectionObserverEntry({\n      time: now(),\n      target: target,\n      boundingClientRect: targetRect,\n      rootBounds: rootRect,\n      intersectionRect: intersectionRect\n    });\n\n    if (!oldEntry) {\n      this._queuedEntries.push(newEntry);\n    } else if (rootIsInDom && rootContainsTarget) {\n      // If the new entry intersection ratio has crossed any of the\n      // thresholds, add a new entry.\n      if (this._hasCrossedThreshold(oldEntry, newEntry)) {\n        this._queuedEntries.push(newEntry);\n      }\n    } else {\n      // If the root is not in the DOM or target is not contained within\n      // root but the previous entry for this target had an intersection,\n      // add a new record indicating removal.\n      if (oldEntry && oldEntry.isIntersecting) {\n        this._queuedEntries.push(newEntry);\n      }\n    }\n  }, this);\n\n  if (this._queuedEntries.length) {\n    this._callback(this.takeRecords(), this);\n  }\n};\n\n\n/**\n * Accepts a target and root rect computes the intersection between then\n * following the algorithm in the spec.\n * TODO(philipwalton): at this time clip-path is not considered.\n * https://w3c.github.io/IntersectionObserver/#calculate-intersection-rect-algo\n * @param {Element} target The target DOM element\n * @param {Object} rootRect The bounding rect of the root after being\n *     expanded by the rootMargin value.\n * @return {?Object} The final intersection rect object or undefined if no\n *     intersection is found.\n * @private\n */\nIntersectionObserver.prototype._computeTargetAndRootIntersection =\n    function(target, rootRect) {\n\n  // If the element isn't displayed, an intersection can't happen.\n  if (window.getComputedStyle(target).display == 'none') return;\n\n  var targetRect = getBoundingClientRect(target);\n  var intersectionRect = targetRect;\n  var parent = getParentNode(target);\n  var atRoot = false;\n\n  while (!atRoot) {\n    var parentRect = null;\n    var parentComputedStyle = parent.nodeType == 1 ?\n        window.getComputedStyle(parent) : {};\n\n    // If the parent isn't displayed, an intersection can't happen.\n    if (parentComputedStyle.display == 'none') return;\n\n    if (parent == this.root || parent == document) {\n      atRoot = true;\n      parentRect = rootRect;\n    } else {\n      // If the element has a non-visible overflow, and it's not the <body>\n      // or <html> element, update the intersection rect.\n      // Note: <body> and <html> cannot be clipped to a rect that's not also\n      // the document rect, so no need to compute a new intersection.\n      if (parent != document.body &&\n          parent != document.documentElement &&\n          parentComputedStyle.overflow != 'visible') {\n        parentRect = getBoundingClientRect(parent);\n      }\n    }\n\n    // If either of the above conditionals set a new parentRect,\n    // calculate new intersection data.\n    if (parentRect) {\n      intersectionRect = computeRectIntersection(parentRect, intersectionRect);\n\n      if (!intersectionRect) break;\n    }\n    parent = getParentNode(parent);\n  }\n  return intersectionRect;\n};\n\n\n/**\n * Returns the root rect after being expanded by the rootMargin value.\n * @return {Object} The expanded root rect.\n * @private\n */\nIntersectionObserver.prototype._getRootRect = function() {\n  var rootRect;\n  if (this.root) {\n    rootRect = getBoundingClientRect(this.root);\n  } else {\n    // Use <html>/<body> instead of window since scroll bars affect size.\n    var html = document.documentElement;\n    var body = document.body;\n    rootRect = {\n      top: 0,\n      left: 0,\n      right: html.clientWidth || body.clientWidth,\n      width: html.clientWidth || body.clientWidth,\n      bottom: html.clientHeight || body.clientHeight,\n      height: html.clientHeight || body.clientHeight\n    };\n  }\n  return this._expandRectByRootMargin(rootRect);\n};\n\n\n/**\n * Accepts a rect and expands it by the rootMargin value.\n * @param {Object} rect The rect object to expand.\n * @return {Object} The expanded rect.\n * @private\n */\nIntersectionObserver.prototype._expandRectByRootMargin = function(rect) {\n  var margins = this._rootMarginValues.map(function(margin, i) {\n    return margin.unit == 'px' ? margin.value :\n        margin.value * (i % 2 ? rect.width : rect.height) / 100;\n  });\n  var newRect = {\n    top: rect.top - margins[0],\n    right: rect.right + margins[1],\n    bottom: rect.bottom + margins[2],\n    left: rect.left - margins[3]\n  };\n  newRect.width = newRect.right - newRect.left;\n  newRect.height = newRect.bottom - newRect.top;\n\n  return newRect;\n};\n\n\n/**\n * Accepts an old and new entry and returns true if at least one of the\n * threshold values has been crossed.\n * @param {?IntersectionObserverEntry} oldEntry The previous entry for a\n *    particular target element or null if no previous entry exists.\n * @param {IntersectionObserverEntry} newEntry The current entry for a\n *    particular target element.\n * @return {boolean} Returns true if a any threshold has been crossed.\n * @private\n */\nIntersectionObserver.prototype._hasCrossedThreshold =\n    function(oldEntry, newEntry) {\n\n  // To make comparing easier, an entry that has a ratio of 0\n  // but does not actually intersect is given a value of -1\n  var oldRatio = oldEntry && oldEntry.isIntersecting ?\n      oldEntry.intersectionRatio || 0 : -1;\n  var newRatio = newEntry.isIntersecting ?\n      newEntry.intersectionRatio || 0 : -1;\n\n  // Ignore unchanged ratios\n  if (oldRatio === newRatio) return;\n\n  for (var i = 0; i < this.thresholds.length; i++) {\n    var threshold = this.thresholds[i];\n\n    // Return true if an entry matches a threshold or if the new ratio\n    // and the old ratio are on the opposite sides of a threshold.\n    if (threshold == oldRatio || threshold == newRatio ||\n        threshold < oldRatio !== threshold < newRatio) {\n      return true;\n    }\n  }\n};\n\n\n/**\n * Returns whether or not the root element is an element and is in the DOM.\n * @return {boolean} True if the root element is an element and is in the DOM.\n * @private\n */\nIntersectionObserver.prototype._rootIsInDom = function() {\n  return !this.root || containsDeep(document, this.root);\n};\n\n\n/**\n * Returns whether or not the target element is a child of root.\n * @param {Element} target The target element to check.\n * @return {boolean} True if the target element is a child of root.\n * @private\n */\nIntersectionObserver.prototype._rootContainsTarget = function(target) {\n  return containsDeep(this.root || document, target);\n};\n\n\n/**\n * Adds the instance to the global IntersectionObserver registry if it isn't\n * already present.\n * @private\n */\nIntersectionObserver.prototype._registerInstance = function() {\n  if (registry.indexOf(this) < 0) {\n    registry.push(this);\n  }\n};\n\n\n/**\n * Removes the instance from the global IntersectionObserver registry.\n * @private\n */\nIntersectionObserver.prototype._unregisterInstance = function() {\n  var index = registry.indexOf(this);\n  if (index != -1) registry.splice(index, 1);\n};\n\n\n/**\n * Returns the result of the performance.now() method or null in browsers\n * that don't support the API.\n * @return {number} The elapsed time since the page was requested.\n */\nfunction now() {\n  return window.performance && performance.now && performance.now();\n}\n\n\n/**\n * Throttles a function and delays its execution, so it's only called at most\n * once within a given time period.\n * @param {Function} fn The function to throttle.\n * @param {number} timeout The amount of time that must pass before the\n *     function can be called again.\n * @return {Function} The throttled function.\n */\nfunction throttle(fn, timeout) {\n  var timer = null;\n  return function () {\n    if (!timer) {\n      timer = setTimeout(function() {\n        fn();\n        timer = null;\n      }, timeout);\n    }\n  };\n}\n\n\n/**\n * Adds an event handler to a DOM node ensuring cross-browser compatibility.\n * @param {Node} node The DOM node to add the event handler to.\n * @param {string} event The event name.\n * @param {Function} fn The event handler to add.\n * @param {boolean} opt_useCapture Optionally adds the even to the capture\n *     phase. Note: this only works in modern browsers.\n */\nfunction addEvent(node, event, fn, opt_useCapture) {\n  if (typeof node.addEventListener == 'function') {\n    node.addEventListener(event, fn, opt_useCapture || false);\n  }\n  else if (typeof node.attachEvent == 'function') {\n    node.attachEvent('on' + event, fn);\n  }\n}\n\n\n/**\n * Removes a previously added event handler from a DOM node.\n * @param {Node} node The DOM node to remove the event handler from.\n * @param {string} event The event name.\n * @param {Function} fn The event handler to remove.\n * @param {boolean} opt_useCapture If the event handler was added with this\n *     flag set to true, it should be set to true here in order to remove it.\n */\nfunction removeEvent(node, event, fn, opt_useCapture) {\n  if (typeof node.removeEventListener == 'function') {\n    node.removeEventListener(event, fn, opt_useCapture || false);\n  }\n  else if (typeof node.detatchEvent == 'function') {\n    node.detatchEvent('on' + event, fn);\n  }\n}\n\n\n/**\n * Returns the intersection between two rect objects.\n * @param {Object} rect1 The first rect.\n * @param {Object} rect2 The second rect.\n * @return {?Object} The intersection rect or undefined if no intersection\n *     is found.\n */\nfunction computeRectIntersection(rect1, rect2) {\n  var top = Math.max(rect1.top, rect2.top);\n  var bottom = Math.min(rect1.bottom, rect2.bottom);\n  var left = Math.max(rect1.left, rect2.left);\n  var right = Math.min(rect1.right, rect2.right);\n  var width = right - left;\n  var height = bottom - top;\n\n  return (width >= 0 && height >= 0) && {\n    top: top,\n    bottom: bottom,\n    left: left,\n    right: right,\n    width: width,\n    height: height\n  };\n}\n\n\n/**\n * Shims the native getBoundingClientRect for compatibility with older IE.\n * @param {Element} el The element whose bounding rect to get.\n * @return {Object} The (possibly shimmed) rect of the element.\n */\nfunction getBoundingClientRect(el) {\n  var rect;\n\n  try {\n    rect = el.getBoundingClientRect();\n  } catch (err) {\n    // Ignore Windows 7 IE11 \"Unspecified error\"\n    // https://github.com/w3c/IntersectionObserver/pull/205\n  }\n\n  if (!rect) return getEmptyRect();\n\n  // Older IE\n  if (!(rect.width && rect.height)) {\n    rect = {\n      top: rect.top,\n      right: rect.right,\n      bottom: rect.bottom,\n      left: rect.left,\n      width: rect.right - rect.left,\n      height: rect.bottom - rect.top\n    };\n  }\n  return rect;\n}\n\n\n/**\n * Returns an empty rect object. An empty rect is returned when an element\n * is not in the DOM.\n * @return {Object} The empty rect.\n */\nfunction getEmptyRect() {\n  return {\n    top: 0,\n    bottom: 0,\n    left: 0,\n    right: 0,\n    width: 0,\n    height: 0\n  };\n}\n\n/**\n * Checks to see if a parent element contains a child element (including inside\n * shadow DOM).\n * @param {Node} parent The parent element.\n * @param {Node} child The child element.\n * @return {boolean} True if the parent node contains the child node.\n */\nfunction containsDeep(parent, child) {\n  var node = child;\n  while (node) {\n    if (node == parent) return true;\n\n    node = getParentNode(node);\n  }\n  return false;\n}\n\n\n/**\n * Gets the parent node of an element or its host element if the parent node\n * is a shadow root.\n * @param {Node} node The node whose parent to get.\n * @return {Node|null} The parent node or null if no parent exists.\n */\nfunction getParentNode(node) {\n  var parent = node.parentNode;\n\n  if (parent && parent.nodeType == 11 && parent.host) {\n    // If the parent is a shadow root, return the host element.\n    return parent.host;\n  }\n\n  if (parent && parent.assignedSlot) {\n    // If the parent is distributed in a <slot>, return the parent of a slot.\n    return parent.assignedSlot.parentNode;\n  }\n\n  return parent;\n}\n\n\n// Exposes the constructors globally.\nwindow.IntersectionObserver = IntersectionObserver;\nwindow.IntersectionObserverEntry = IntersectionObserverEntry;\n\n}());\n"],"names":["Object","freeze","initialize","modulePath","e","importFunctionName","t","self","Function","o","r","URL","location","n","revokeObjectURL","src","remove","Promise","a","c","moduleMap","l","Blob","type","m","assign","document","createElement","createObjectURL","[object Object]","Error","head","appendChild","window","IntersectionObserverEntry","prototype","defineProperty","get","this","intersectionRatio","IntersectionObserver","THROTTLE_TIMEOUT","POLL_INTERVAL","USE_MUTATION_OBSERVER","observe","target","_observationTargets","some","item","element","nodeType","_registerInstance","push","entry","_monitorIntersections","_checkForIntersections","unobserve","filter","length","_unmonitorIntersections","_unregisterInstance","disconnect","takeRecords","records","_queuedEntries","slice","_initThresholds","opt_threshold","threshold","Array","isArray","sort","i","isNaN","_parseRootMargin","opt_rootMargin","margins","split","map","margin","parts","exec","value","parseFloat","unit","_monitoringIntersections","_monitoringInterval","setInterval","addEvent","_domObserver","MutationObserver","attributes","childList","characterData","subtree","clearInterval","removeEvent","rootIsInDom","_rootIsInDom","rootRect","_getRootRect","top","bottom","left","right","width","height","forEach","targetRect","getBoundingClientRect","rootContainsTarget","_rootContainsTarget","oldEntry","intersectionRect","_computeTargetAndRootIntersection","newEntry","time","performance","now","boundingClientRect","rootBounds","_hasCrossedThreshold","isIntersecting","_callback","getComputedStyle","display","rect1","rect2","parent","getParentNode","atRoot","parentRect","parentComputedStyle","root","body","documentElement","overflow","Math","max","min","html","clientWidth","clientHeight","_expandRectByRootMargin","rect","_rootMarginValues","newRect","oldRatio","newRatio","thresholds","containsDeep","targetArea","intersectionArea","Number","toFixed","callback","opt_options","fn","timeout","timer","options","bind","setTimeout","rootMargin","join","node","event","opt_useCapture","addEventListener","attachEvent","removeEventListener","detatchEvent","el","err","child","parentNode","host","assignedSlot"],"mappings":"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"}